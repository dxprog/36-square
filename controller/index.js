const strand = require('rpi-ws281x-native');

const BOARD_WIDTH = 6;
const BOARD_HEIGHT = 6;
const NUM_LEDS = BOARD_WIDTH * BOARD_HEIGHT;
const pixelData = new Uint32Array(NUM_LEDS);

// The map of what LED is physically where
const PIXEL_REMAP = (new Uint16Array(NUM_LEDS)).map((value, index) => {
  let x = index % BOARD_WIDTH;
  let y = Math.floor(index / BOARD_WIDTH);
  x = y % 2 === 0 ? Math.abs(x - 5) : x;
  return y * BOARD_WIDTH + x;
});

strand.init(NUM_LEDS);
strand.setIndexMapping(PIXEL_REMAP);

// ---- trap the SIGINT and reset before exit
process.on('SIGINT', () => {
  strand.reset();
  process.nextTick(() => process.exit(0));
});

function setPixel(x, y, color) {
  const index = y * BOARD_WIDTH + x;
  pixelData[index] = color;
}

function render() {
  strand.render(pixelData);
}

const IMAGE = [
  [
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
    0x000000, 0x00b300, 0x00b300, 0x00b300, 0x00b300, 0x000000,
    0x000000, 0x00b300, 0x00b300, 0xffebdf, 0x000000, 0x000000,
    0x000000, 0x000000, 0xffebdf, 0xffebdf, 0xffebdf, 0x000000,
    0x000000, 0x000000, 0xffebdf, 0x5f63ff, 0x000000, 0x000000,
    0x000000, 0x000000, 0xffebdf, 0x5f63ff, 0x000000, 0x000000
  ],
  [
    0x000000, 0x000000, 0x00b300, 0x000000, 0x00b300, 0x000000,
    0x000000, 0x00b300, 0x00b300, 0x00b300, 0x000000, 0x000000,
    0x000000, 0x00b300, 0x00b300, 0xffebdf, 0x000000, 0x000000,
    0x000000, 0x000000, 0xffebdf, 0xffebdf, 0xffebdf, 0x000000,
    0x000000, 0x000000, 0xffebdf, 0x5f63ff, 0x000000, 0x000000,
    0x000000, 0xffebdf, 0x5f63ff, 0x5f63ff, 0x000000, 0x000000
  ],
  [
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
    0x000000, 0x00b300, 0x000000, 0x00b300, 0x000000, 0x000000,
    0x000000, 0x00b300, 0x00b300, 0x00b300, 0x000000, 0x000000,
    0x000000, 0x000000, 0x00b300, 0xffebdf, 0x000000, 0x000000,
    0x000000, 0x000000, 0xffebdf, 0xffebdf, 0xffebdf, 0x000000,
    0x000000, 0xffebdf, 0xffebdf, 0x5f63ff, 0x000000, 0x000000
  ],
  [
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
    0x000000, 0x000000, 0x00b300, 0x00b300, 0x000000, 0x000000,
    0x000000, 0x00b300, 0x00b300, 0xffebdf, 0x00b300, 0x000000,
    0x000000, 0x000000, 0xffebdf, 0xffebdf, 0xffebdf, 0x000000,
    0x000000, 0x000000, 0xffebdf, 0x5f63ff, 0x000000, 0x000000,
    0x000000, 0x000000, 0xffebdf, 0x5f63ff, 0x000000, 0x000000
  ],
  [
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
    0x000000, 0x00b300, 0x00b300, 0x00b300, 0x00b300, 0x000000,
    0x000000, 0x00b300, 0x00b300, 0xffebdf, 0x000000, 0x000000,
    0x000000, 0x000000, 0xffebdf, 0xffebdf, 0xffebdf, 0x000000,
    0x000000, 0x000000, 0x5f63ff, 0xffebdf, 0x000000, 0x000000,
    0x000000, 0x000000, 0xffebdf, 0x5f63ff, 0x000000, 0x000000
  ],
  [
    0x000000, 0x000000, 0x00b300, 0x000000, 0x00b300, 0x000000,
    0x000000, 0x00b300, 0x00b300, 0x00b300, 0x000000, 0x000000,
    0x000000, 0x00b300, 0x00b300, 0xffebdf, 0x000000, 0x000000,
    0x000000, 0x000000, 0xffebdf, 0xffebdf, 0xffebdf, 0x000000,
    0x000000, 0x000000, 0xffebdf, 0x5f63ff, 0x000000, 0x000000,
    0x000000, 0x000000, 0x5f63ff, 0xffebdf, 0x000000, 0x000000
  ],
  [
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
    0x000000, 0x00b300, 0x000000, 0x00b300, 0x000000, 0x000000,
    0x000000, 0x00b300, 0x00b300, 0x00b300, 0x000000, 0x000000,
    0x000000, 0x000000, 0x00b300, 0xffebdf, 0x000000, 0x000000,
    0x000000, 0x000000, 0xffebdf, 0xffebdf, 0xffebdf, 0x000000,
    0x000000, 0x000000, 0x5f63ff, 0xffebdf, 0x000000, 0x000000
  ],
  [
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
    0x000000, 0x000000, 0x00b300, 0x00b300, 0x000000, 0x000000,
    0x000000, 0x00b300, 0x00b300, 0xffebdf, 0x00b300, 0x000000,
    0x000000, 0x000000, 0xffebdf, 0xffebdf, 0xffebdf, 0x000000,
    0x000000, 0x000000, 0xffebdf, 0x5f63ff, 0x000000, 0x000000,
    0x000000, 0x000000, 0xffebdf, 0x5f63ff, 0x000000, 0x000000
  ]
];

// ---- animation-loop
let frame = 0;
setInterval(function () {
  IMAGE[frame].forEach((value, index) => {
    pixelData[index] = value;
  });
  strand.render(pixelData);
  frame++;
  frame = frame >= IMAGE.length ? 0 : frame;
}, 83);

console.log('Press <ctrl>+C to exit.');
